@model Exercises.ViewModels.SessionBPSViewModel

@*This is for jquery*@
<script src="../../Scripts/jquery-1.5.1.js" type="text/javascript"></script>
@*This is for jquery UI, for Calender control*@
<script src="../../Scripts/jquery-ui-1.8.11.js" type="text/javascript"></script>

@*This is for JSON*@
<script src="../../Scripts/json2.js" type="text/javascript"></script>
@*These are for DataTables*@
<script src="../../Scripts/DataTables-1.8.1/media/js/jquery.dataTables.js" type="text/javascript"></script>
<script src="../../Scripts/DataTables-1.8.1/extras/TableTools/media/js/TableTools.js" type="text/javascript"></script>
<script src="../../Scripts/DataTables-1.8.1/extras/TableTools/media/js/ZeroClipboard.js" type="text/javascript"></script>
@*These are for styling Control*@
<link href="../../Content/DataTables-1.8.1/extras/TableTools/media/css/TableTools.css" rel="stylesheet" type="text/css" />
<link href="../../Content/DataTables-1.8.1/extras/TableTools/media/css/TableTools_JUI.css" rel="stylesheet" type="text/css" />
<link href="../../Content/themes/base/jquery.ui.all.css" rel="stylesheet" type="text/css" />

<script type="text/javascript">

    function DeleteRow()
    {

        // Here I have used DataTables.TableTools plugin for getting selected row items
        var oTT = TableTools.fnGetInstance('tbl'); // Get Table instance
        var sRow = oTT.fnGetSelected(); // Get Selected Item From Table


        // Set deleted row item to editable text boxes
        $('#SetNumber').val($.trim(sRow[0].cells[0].innerHTML.toString()));
        $('#ExerciseId').val(jQuery.trim(sRow[0].cells[1].innerHTML.toString()));
        $('#Reps').val($.trim(sRow[0].cells[2].innerHTML.toString()));

        $('#RPE').val($.trim(sRow[0].cells[0].innerHTML.toString()));
        $('#Load').val(jQuery.trim(sRow[0].cells[1].innerHTML.toString()));
        $('#Commentary').val($.trim(sRow[0].cells[2].innerHTML.toString()));

        $('#PersonalRecord').val($.trim(sRow[0].cells[0].innerHTML.toString()));


        $('.tbl').dataTable().fnDeleteRow(sRow[0]);

    }

    function Add() {
        // Adding item to table
        $('.tbl').dataTable().fnAddData([$('#SetNumber').val(), $('#ExerciseId').val(), $('#Reps').val(),
                                $('#RPE').val(), $('#Load').val(), $('#Commentary').val(), $('#PersonalRecord').val()]);

        // Making Editable text empty
        $('#SetNumber').val("")
        $('#ExerciseId').val("")
        $('#Reps').val("")
        $('#RPE').val("")
        $('#Load').val("")
        $('#Commentary').val("")
        $('#PersonalRecord').val("")
    }

    function Save() {
        // Step 1: Read View Data and Create JSON Object

        // Creating SessionSet Json Object
        var sets = {"SetNumber": "", "ExerciseId": "", "Reps": "", "RPE": "", "Load": " ", "Commentary": " ", "PersonalRecord": " " };

        // Creating SalesMain Json Object
        var sessionBPS = {"SessionDate": "", "Commentary": "", "SleepQuality": "", "TrustInSelf": "",
                                            "Stress": "", "Fatigue": "", "Stiffness":"", "Motivation":"", "Sets": []};

        // Set Sales Main Value
        sessionBPS.SessionDate = $("#SessionDate").val();
        sessionBPS.Commentary = $("#Commentary").val();
        sessionBPS.SleepQuality = $("#SleepQuality").val();
        sessionBPS.TrustInSelf = $("#TrustInSelf").val();
        sessionBPS.SessionDate = $("#Stress").val();
        sessionBPS.Commentary = $("#Fatigue").val();
        sessionBPS.SleepQuality = $("#Stiffness").val();
        sessionBPS.TrustInSelf = $("#Motivation").val();

        // Getting Table Data from where we will fetch Sets records
        var oTable = $('.tbl').dataTable().fnGetData();

        for (var i = 0; i < oTable.length; i++) {

            // IF This view is for edit then it will read SalesId from Hidden field
            if ($('h2').text() == "Edit") {
                sets.SessionId = $('#SessionId').val();
            }
            else {
                sets.SessionId = 0;
            }

            // Set SalesSub individual Value
            sets.SetNumber = oTable[i][0];
            sets.ExerciseId = oTable[i][1];
            sets.Reps = oTable[i][2];
            sets.RPE = oTable[i][3];
            sets.Load = oTable[i][4];
            sets.Commentary = oTable[i][5];
            sets.PersonalRecord = oTable[i][6];
            // adding to SalesMain.SalesSub List Item
            sessionBPS.Sets.push(sets);

            sets = { "SetNumber": "", "ExerciseId": "", "Reps": "", "RPE": "", "Load": " ", "Commentary": " ", "PersonalRecord": " " };

        }
        // Step 1: Ends Here

        // Set 2: Ajax Post
        // Here i have used ajax post for saving/updating information
        $.ajax({
            url: '/SessionBPS/Create',
            data: JSON.stringify(sessionBPS),
            type: 'POST',
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {

                if (result.Success == "1") {
                    window.location.href = "/SessionBPS/Index";
                }
                else {
                    alert(result.ex);
                }
            }
        });

    }

</script>




<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Session</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.session.SessionDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.session.SessionDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.session.SessionDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.session.Commentary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.session.Commentary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.session.Commentary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bps.SleepQuality, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bps.SleepQuality, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bps.SleepQuality, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bps.TrustInSelf, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bps.TrustInSelf, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bps.TrustInSelf, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bps.Stress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bps.Stress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bps.Stress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bps.Fatigue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bps.Fatigue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bps.Fatigue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bps.Stiffness, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bps.Stiffness, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bps.Stiffness, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bps.Motivation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bps.Motivation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bps.Motivation, "", new { @class = "text-danger" })
            </div>
        </div>

        <table id="tbl">
            <thead>
                <tr>
                    <th>SetNumber</th>
                    <th>ExerciseID</th>
                    <th>Reps</th>
                    <th>RPE</th>
                    <th>Load</th>
                    <th>Commentary</th>
                    <th>PersonalRecord</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    foreach (var item in Model.session.Sets)
                    {
                        <tr>
                            <td>
                                @Html.DisplayTextFor(i => item.SetNumber)
                            </td>
                            <td>
                                @Html.DisplayTextFor(i => item.ExerciseID)
                            </td>
                            <td>
                                @Html.DisplayTextFor(i => item.Reps)
                            </td>
                            <td>
                                @Html.DisplayTextFor(i => item.RPE)
                            </td>
                            <td>
                                @Html.DisplayTextFor(i => item.Load)
                            </td>
                            <td>
                                @Html.DisplayTextFor(i => item.Commentary)
                            </td>
                            <td>
                                @Html.DisplayTextFor(i => item.PersonalRecord)
                            </td>
                        </tr>

                    }
                }
            </tbody>
        </table>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

